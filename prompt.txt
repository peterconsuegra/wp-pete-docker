**Context:** You are an experienced DevOps devolver with extensive knowlege in Docker. Below are the code files of a Docker LAMP app

**docker-compose.yml**
```
services:
  # 1) WordPress + PHP-Apache
  wordpress:
    build: ./wordpress
    restart: always
    volumes:
      - wp_data:/var/www/html
    env_file: .env
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: ${DB_USER}
      WORDPRESS_DB_PASSWORD: ${DB_PASS}
      WORDPRESS_DB_NAME: ${DB_NAME}
      # enable Redis object cache if using plugin
      REDIS_HOST: redis
    depends_on:
      - db
      - redis
    networks:
      - frontend
    ports:
      - "8000:80"

  # 2) MariaDB
  db:
    image: mariadb:10.6
    restart: always
    volumes:
      - db_data:/var/lib/mysql
      - ./db-config/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./db-config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    env_file: .env
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER:     ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    networks:
      - backend

  # 3) Redis for object caching
  redis:
    image: redis:7-alpine
    restart: always
    networks:
      - backend

  # 4) (Optional) phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - 8080:80
    environment:
      PMA_HOST: db
      PMA_USER: ${DB_USER}
      PMA_PASSWORD: ${DB_PASS}
    depends_on:
      - db
    networks:
      - frontend

volumes:
  wp_data:
  db_data:

networks:
  frontend:
  backend:

```

========================================

**wordpress/Dockerfile**
```
FROM php:8.1-apache

# 1) Install PHP extensions, the MySQL client, and prepare PEAR temp
RUN apt-get update \
 && apt-get install -y \
      default-mysql-client \
      vim \
      libfreetype6-dev \
      libjpeg62-turbo-dev \
      libpng-dev \
      libzip-dev \
      zip \
      unzip \
      git \
      libonig-dev \
      libxml2-dev \
 \
 # configure & install PHP extensions
 && docker-php-ext-configure gd --with-freetype --with-jpeg \
 && docker-php-ext-install -j"$(nproc)" \
      mysqli \
      pdo \
      pdo_mysql \
      gd \
      zip \
      opcache \
 \
 # ensure PEAR temp exists so pecl can unpack
 && mkdir -p /tmp/pear/temp \
 && chmod -R 0777 /tmp/pear \
 \
 # install and enable Redis via PECL
 && pecl install redis \
 && docker-php-ext-enable redis \
 \
 # clean up
 && rm -rf /var/lib/apt/lists/*

# 2) Enable Apache modules
RUN a2enmod rewrite headers expires

# 3) Copy in your custom php.ini
COPY php.ini /usr/local/etc/php/

# 4) Download & unpack WordPress core
RUN curl -o /tmp/wordpress.tar.gz https://wordpress.org/latest.tar.gz \
 && tar -xzf /tmp/wordpress.tar.gz --strip-components=1 -C /var/www/html \
 && rm /tmp/wordpress.tar.gz \
 && chown -R www-data:www-data /var/www/html

# 5) Set working dir & ensure ownership
WORKDIR /var/www/html
RUN chown -R www-data:www-data /var/www/html

# 6) (Optional) Install WP-CLI
RUN curl -o /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \
 && chmod +x /usr/local/bin/wp

 # 6) Copy in our custom entrypoint and make it executable
COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# 7) Switch over to our entrypoint and start Apache
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["apache2-foreground"]

EXPOSE 80
```

========================================

**db-config/my.cnf**
```
[mysqld]
innodb_buffer_pool_size = 1G
innodb_log_file_size    = 256M
innodb_flush_log_at_trx_commit = 2
query_cache_type = 0
skip-name-resolve
```
