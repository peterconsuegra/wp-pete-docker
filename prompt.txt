**Context:** You are an experienced DevOps devolver with extensive knowlege in Docker. Below are the code files of a Docker LAMP app

**docker-compose.yml**
```
services:
  apache:
    build: ./apache
    restart: always
    depends_on:
      - php
      - db
      - redis
    volumes:
      - wp_data:/var/www/html            # shared codebase
      - apache_sites_available:/etc/apache2/sites-available
      - apache_sites_enabled:/etc/apache2/sites-enabled
    ports:
      - "80:80"
  php:
    build: ./php
    restart: always
    expose:
      - "9000"                           # FPM listens here
    volumes:
      - wp_data:/var/www/html
      - ssh_data:/root/.ssh              # Pete still needs this
    env_file: .env                       # same env as before
    environment:
      WORDPRESS_DB_HOST: db:3306
      PETE_DB_NAME: ${PETE_DB_NAME}
      PETE_DB_USER: ${PETE_DB_USER}
      PETE_DB_PASSWORD: ${PETE_DB_PASS}
      PETE_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      BLOWFISH_SECRET: ${BLOWFISH_SECRET}
      REDIS_HOST: redis
  db:
    image: mariadb:10.6
    restart: always
    volumes:
      - db_data:/var/lib/mysql
      - ./db-config/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./db-config/init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

  redis:
    image: redis:7-alpine
    restart: always

volumes:
  wp_data:
  db_data:
  ssh_data:
  apache_sites_available:
  apache_sites_enabled:
```

========================================

**php/Dockerfile**
```
FROM php:8.1-fpm

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1 \
    COMPOSER_DISABLE_XDEBUG_WARN=1

# 1) System & PHP extensions ---------------------------------------------------
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        default-mysql-client vim sudo git unzip zip \
        libfreetype6-dev libjpeg62-turbo-dev libpng-dev libzip-dev \
        libonig-dev libxml2-dev \
        python3 python3-pip python3-jinja2 \
        python3-pandas python3-requests \
        openssh-client \
        certbot python3-certbot-apache \
        curl ca-certificates && \
    \
    docker-php-ext-configure gd --with-freetype --with-jpeg && \
    docker-php-ext-install -j"$(nproc)" \
        mysqli pdo pdo_mysql gd zip opcache && \
    pecl install redis && \
    docker-php-ext-enable redis && \
    \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# 3) Composer & WP-CLI ---------------------------------------------------------
RUN curl -sS https://getcomposer.org/installer | php && \
    mv composer.phar /usr/local/bin/composer && chmod +x /usr/local/bin/composer && \
    curl -o /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
    chmod +x /usr/local/bin/wp

# 4) Copy configs & Pete installer --------------------------------------------
COPY php.ini                 /usr/local/etc/php/
COPY .gitconfig              /root/.gitconfig
COPY pete_install.sh         /usr/local/bin/pete_install.sh
RUN chmod +x /usr/local/bin/pete_install.sh && \
    chown www-data:www-data  /usr/local/bin/pete_install.sh

# 6) phpMyAdmin (served via Apache container) ----------------------------------
ARG PMA_VERSION=5.2.2
RUN set -eux; \
    curl -fsSL "https://files.phpmyadmin.net/phpMyAdmin/${PMA_VERSION}/phpMyAdmin-${PMA_VERSION}-all-languages.tar.gz" -o /tmp/pma.tar.gz; \
    tar xzf /tmp/pma.tar.gz -C /usr/src/; \
    mv /usr/src/phpMyAdmin-${PMA_VERSION}-all-languages /usr/src/phpmyadmin; \
    rm /tmp/pma.tar.gz && \
    mkdir -p /usr/src/phpmyadmin/tmp && \
    chown -R www-data:www-data /usr/src/phpmyadmin
COPY config.inc.php.custom /usr/src/phpmyadmin/config.inc.php

# 7) Working dir, ownership, expose FPM ---------------------------------------
WORKDIR /var/www/html
RUN chown -R www-data:www-data /var/www/html
EXPOSE 9000 

USER www-data
ENTRYPOINT ["/usr/local/bin/pete_install.sh"]
CMD ["php-fpm"]

```

========================================

**apache/Dockerfile**
```
# ─────────────────────────────────────────────────────────────
# Apache (event) + ModSecurity 2 + OWASP CRS
# ─────────────────────────────────────────────────────────────
FROM debian:bullseye-slim
ENV DEBIAN_FRONTEND=noninteractive

# 1) Packages
RUN apt-get update && apt-get install -y --no-install-recommends \
      apache2 apache2-utils \
      libapache2-mod-security2 \
      vim \
      modsecurity-crs \
      curl ca-certificates \
  && rm -rf /var/lib/apt/lists/*

# 2) event MPM  +  required modules
RUN a2dismod mpm_prefork && \
    a2enmod  mpm_event proxy proxy_fcgi rewrite headers expires status env security2

# 3) ModSecurity base + CRS (rules **and** phrase files)
RUN set -e; \
    mkdir -p /etc/modsecurity /etc/modsecurity/rules /var/cache/modsecurity && \
    cp /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf && \
    \
    CRS_SETUP=$(find /usr/share -type f -name "crs-setup.conf.example" | head -n1 || true); \
    if [ -n "$CRS_SETUP" ]; then \
        cp "$CRS_SETUP" /etc/modsecurity/crs-setup.conf; \
    else \
        echo "# minimal setup" > /etc/modsecurity/crs-setup.conf; \
    fi && \
    \
    # link *.conf rules
    find /usr/share -type f -path "*modsecurity-crs*/rules/*.conf" -print0 \
      | xargs -0 -I{} ln -sf {} /etc/modsecurity/rules/ 2>/dev/null || true && \
    # link *.data phrase files (fixes the scanners-user-agents.data error)
    find /usr/share -type f -path "*modsecurity-crs*/rules/*.data" -print0 \
      | xargs -0 -I{} ln -sf {} /etc/modsecurity/rules/ 2>/dev/null || true && \
    \
    rm -f /etc/apache2/mods-enabled/security2.load   # silence duplicate-load warning

# 5) Create dirs & sudo rules Pete expects ------------------------------------
RUN mkdir -p /etc/sudoers.d /var/www/.ssh /data/wwwlog && \
    printf '%s\n' \
     'www-data ALL=(ALL) NOPASSWD: /usr/bin/git, /etc/init.d/apache2 reload, /usr/bin/update-alternatives, /var/www/html/Pete/scripts/*' \
     > /etc/sudoers.d/www-data && \
    chmod 440 /etc/sudoers.d/www-data && \
    chown -R www-data:www-data /var/www

# 4)  vHosts & custom includes
COPY pete.conf               /etc/apache2/sites-available/
COPY phpmyadmin.conf         /etc/apache2/sites-available/
COPY modsecurity-apache.conf /etc/apache2/conf-available/modsecurity.conf
COPY whitelist.conf          /etc/modsecurity/whitelist.conf

RUN a2ensite pete.conf phpmyadmin.conf \
 && a2enconf modsecurity \
 && a2dissite 000-default.conf

RUN echo "ServerName localhost" >> /etc/apache2/apache2.conf
WORKDIR /var/www/html
EXPOSE 80
CMD ["apachectl","-D","FOREGROUND"]


COPY start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

CMD ["start.sh"]
```

========================================

**db-config/my.cnf**
```
[mysqld]
innodb_buffer_pool_size = 1G
innodb_log_file_size    = 256M
innodb_flush_log_at_trx_commit = 2
query_cache_type = 0
skip-name-resolve
```

========================================

**php/pete_install.sh**
```bash
#!/bin/bash
set -e

# 1) Wait for MySQL to be ready
echo "Waiting for MySQL..."
until mysqladmin ping -h db --silent; do
  sleep 3
done

# 3) Full Pete install (only once)
if [ ! -f /var/www/html/.installed ]; then
  echo "#######################################"
  echo "Starting WordPress Pete installation..."
  echo "#######################################"

  mkdir -p /var/www/html/wwwlog/Pete
  chown -R www-data:www-data /var/www/html/wwwlog
  rm -rf /var/www/html/Pete
  cd /var/www/html

  git clone -b docker_pro_utm https://ozone777@bitbucket.org/ozone777/wordpresspete3.git Pete
  cd Pete

  #git fetch --tags
  #latestTag=$(git describe --tags $(git rev-list --tags --max-count=1))
  #git checkout "$latestTag"
  latestTag=10.4

  # Reset composer & env
  rm -f auth.json composer.json
  cp composer_original.json composer.json
  cp .env.example .env

  cat <<EOF >> .env
DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=${PETE_DB_NAME}
DB_USERNAME=${PETE_DB_USER}
DB_PASSWORD=${PETE_DB_PASSWORD}
PETE_ROOT_PASS=${PETE_ROOT_PASSWORD}
PETE_DASHBOARD_URL=https://dashboard.wordpresspete.com
PETE_DEMO=inactive
PETE_ENVIRONMENT=production
PETE_DEBUG=inactive
EOF

  # Install PHP deps & migrate
  rm -rf vendor
  COMPOSER_CACHE_DIR=/dev/null composer install --ignore-platform-reqs --prefer-dist --no-dev
  php artisan key:generate
  php artisan migrate

  # Add general options
  php artisan addoption --option_name=os --option_value=docker
  php artisan addoption --option_name=server_status --option_value=on
  php artisan addoption --option_name=parent_version --option_value=6
  php artisan addoption --option_name=version --option_value="$latestTag"
  php artisan addoption --option_name=app_root --option_value=/var/www/html
  php artisan addoption --option_name=server_conf --option_value=/etc/apache2/sites-available
  php artisan addoption --option_name=server --option_value=apache
  php artisan addoption --option_name=server_version --option_value=24
  php artisan addoption --option_name=os_version --option_value=bionic
  php artisan addoption --option_name=os_distribution --option_value=ubuntu
  php artisan addoption --option_name=logs_route --option_value=/var/www/html/wwwlog
  php artisan addoption --option_name=os_stack --option_value=apache_mpm_prefork
  php artisan addoption --option_name=domain_template --option_value=petelocal.net
  php artisan addoption --option_name=phpmyadmin_status --option_value=on
  php artisan addoption --option_name=security_status --option_value=on

  # Create needed dirs & perms
  mkdir -p public/uploads public/export trash storage storage/logs
  touch storage/logs/laravel.log
  mkdir -p /var/www/html/wwwlog/Pete /var/www/html/wwwlog/example1
  composer dump-autoload --ignore-platform-reqs

  # Mark as installed
  echo "done" > /var/www/html/.installed
  echo "#######################################"
  echo "WordPress Pete installation completed"
  echo "#######################################"

  # Install mod_sec_report dependencies
  cd /var/www/html/Pete/mod_sec_report \
    && pip3 install --no-cache-dir -r requirements.txt \
    && chmod 755 mod_sec_report
fi

# 4) Post-install setup
echo "#######################################"
echo "Launching WordPress Pete..."
echo "#######################################"

# Domain template
#cd /var/www/html/Pete && php artisan addoption --option_name=domain_template --option_value="${DOMAIN_TEMPLATE:-}"

# SSH key (for private repos, if needed)
SSH_DIR="${HOME}/.ssh"
if [ ! -f "${SSH_DIR}/id_rsa.pub" ]; then
  mkdir -p "${SSH_DIR}"
  ssh-keygen -t rsa -N "" -f "${SSH_DIR}/id_rsa"
  chmod 600 "${SSH_DIR}/id_rsa" "${SSH_DIR}/id_rsa.pub"
  chown -R www-data:www-data "${SSH_DIR}"
fi

# Server-status flag
if [ "$SERVER_STATUS" = "On" ]; then
  cd /var/www/html/Pete && php artisan addoption --option_name=server_status --option_value=on
else
  cd /var/www/html/Pete && php artisan addoption --option_name=server_status --option_value=off
fi

# Ensure correct permissions
chown -R www-data:www-data /var/www/html

# 5) Finally delegate to the official Apache entrypoint
exec docker-php-entrypoint "$@"

```

========================================

**db-config/init.sh**
```bash
#!/usr/bin/env bash
set -e

echo ">>> Initializing WordPress & Pete databases…"

mysql -u root -p"$MYSQL_ROOT_PASSWORD" <<-EOSQL

  CREATE DATABASE IF NOT EXISTS \`${PETE_DB_NAME}\`
    CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
  CREATE USER IF NOT EXISTS '${PETE_DB_USER}'@'%'
    IDENTIFIED BY '${PETE_DB_PASS}';
  GRANT ALL PRIVILEGES ON \`${PETE_DB_NAME}\`.* TO '${PETE_DB_USER}'@'%';

  GRANT CREATE, DROP, ALTER, INDEX ON *.* TO '${PETE_DB_USER}'@'%';

  FLUSH PRIVILEGES;
EOSQL

```

========================================

**.env**
```
MYSQL_ROOT_PASSWORD=EvenMoreSecret
PETE_DB_USER=pete
PETE_DB_NAME=pete_db
PETE_DB_PASS=pixma301
BLOWFISH_SECRET=9f2c4e5a7d8b1c3e4f6a8b0c9d2e1f3a
PROMPT_GENERATOR_FILES=docker-compose.yml,php/Dockerfile,apache/Dockerfile,db-config/my.cnf,php/pete_install.sh,db-config/init.sh,.env,apache/pete.conf,apache/phpmyadmin.conf,php/.gitconfig,apache/whitelist.conf,apache/modsecurity-apache.conf
PROMPT_GENERATOR_CONTEXT=You are an experienced DevOps devolver with extensive knowlege in Docker. Below are the code files of a Docker LAMP app
```

========================================

**apache/pete.conf**
```
<VirtualHost *:80>
    ServerName localhost
    DocumentRoot /var/www/html/Pete/public

    <Directory /var/www/html/Pete/public>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    # NEW – send *.php to FPM container
    <FilesMatch "\.php$">
        SetHandler "proxy:fcgi://php:9000"
    </FilesMatch>

    LogLevel debug
    ErrorLog /var/www/html/wwwlog/Pete/error.log
    CustomLog /var/www/html/wwwlog/Pete/access.log combined
</VirtualHost>
```

========================================

**apache/phpmyadmin.conf**
```
Alias /phpmyadmin /usr/src/phpmyadmin

<Directory /usr/src/phpmyadmin>
    Options Indexes FollowSymLinks
    DirectoryIndex index.php
    AllowOverride None
    Require all granted
</Directory>

<IfModule mod_env.c>
  PassEnv BLOWFISH_SECRET
</IfModule>
```

========================================

**php/.gitconfig**
```
[user]
  name  = Pedro Consuegra
  email = pedroconsuegrat@gmail.com

[safe]
  directory = /var/www/html
  directory = /var/www/html/Pete
```

========================================

**apache/whitelist.conf**
```
# remove false-positives first
SecRuleRemoveById 942100 932100 933150 980170

# now per-path disables, each with a different ID
SecRule REQUEST_URI "@beginsWith /wp-admin" \
    "id:1000001,phase:1,pass,nolog,ctl:ruleEngine=Off"
SecRule REQUEST_URI "@beginsWith /phpinfo_panel" \
    "id:1000002,phase:1,pass,nolog,ctl:ruleEngine=Off"
SecRule REQUEST_URI "@beginsWith /phpinfo_view" \
    "id:1000003,phase:1,pass,nolog,ctl:ruleEngine=Off"
SecRule REQUEST_URI "@beginsWith /validate_pete" \
    "id:1000004,phase:1,pass,nolog,ctl:ruleEngine=Off"
SecRule REQUEST_URI "@beginsWith /pete_plugins_install" \
    "id:1000005,phase:1,pass,nolog,ctl:ruleEngine=Off"
SecRule REQUEST_URI "@beginsWith /pete_update" \
    "id:1000006,phase:1,pass,nolog,ctl:ruleEngine=Off"
SecRule REQUEST_URI "@beginsWith /update_post" \
    "id:1000007,phase:1,pass,nolog,ctl:ruleEngine=Off"
SecRule REQUEST_URI "@beginsWith /phpmyadmin" \
    "id:1000008,phase:1,pass,nolog,ctl:ruleEngine=Off"
SecRule REQUEST_URI "@beginsWith /phpmyinfo" \
    "id:1000009,phase:1,pass,nolog,ctl:ruleEngine=Off"
SecRule REQUEST_URI "^/app[0-9]+/update_post$" \
    "id:1000010,phase:1,pass,nolog,ctl:ruleEngine=Off"
```

========================================

**apache/modsecurity-apache.conf**
```
LoadModule security2_module /usr/lib/apache2/modules/mod_security2.so

 <IfModule security2_module>
     SecRuleEngine On
     SecRequestBodyAccess On
     SecResponseBodyAccess Off

     Include /etc/modsecurity/modsecurity.conf


     Include /etc/modsecurity/crs-setup.conf

     Include /etc/modsecurity/whitelist.conf

     IncludeOptional /etc/modsecurity/rules/*.conf
 </IfModule>
```
