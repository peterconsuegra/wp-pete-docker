**Context:** You are an experienced DevOps devolver with extensive knowlege in Docker. Below are the code files of a Docker LAMP app

**.env**
```
MYSQL_ROOT_PASSWORD=EvenMoreSecret
PETE_DB_USER=pete
PETE_DB_NAME=pete_db
PETE_DB_PASS=pixma301
PETE_ENVIRONMENT=development
APACHE_RELOAD_SECRET=SuperReload123
APACHE_RELOAD_URL=http://apache/internal-reload
APACHE_CERTBOT_URL=http://apache/internal-certbot
PHP_VERSION=8.3
```

========================================

**php/Dockerfile**
```
# ──────────────────────────────────────────────────────────────────────
# WordPress Pete – parameterised PHP-FPM image
#   • Build with any officially-maintained tag (8.1-fpm, 8.2-fpm, 8.3-fpm …)
#   • Default is 8.3-fpm if no --build-arg is supplied
# ──────────────────────────────────────────────────────────────────────
ARG PHP_VERSION=8.3


FROM php:${PHP_VERSION}-fpm

ARG PETE_ENVIRONMENT=production
ENV PETE_ENVIRONMENT=${PETE_ENVIRONMENT}

# ────────────── 0. Shared ENV ─────────────────────────────────────────
ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1 \
    COMPOSER_DISABLE_XDEBUG_WARN=1

# ────────────── 1. System & PHP extensions (WebP ready) ──────────────
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        # base utilities
        default-mysql-client vim sudo git unzip zip curl ca-certificates \
        # PHP image libs
        libfreetype6-dev libjpeg62-turbo-dev libpng-dev libwebp-dev \
        libzip-dev libonig-dev libxml2-dev \
        # Imagick deps
        libmagickwand-dev \
        # Python helpers
        python3 python3-pip python3-jinja2 python3-pandas python3-requests \
        # misc tools
        openssh-client docker.io certbot python3-certbot-apache && \
    \
    # Python packages
    PIP_BREAK_SYSTEM_PACKAGES=1 \
        pip3 install --no-cache-dir gdown python-dotenv && \
    \
    # ------- compile GD with WebP ------- \
    docker-php-ext-configure gd \
        --with-freetype \
        --with-jpeg \
        --with-webp && \
    docker-php-ext-install -j"$(nproc)" \
        mysqli pdo pdo_mysql gd zip opcache && \
    \
    # ------- PECL extensions: Imagick (+WebP) & Redis ------- \
    pecl install imagick redis && \
    docker-php-ext-enable imagick redis && \
    \
    # clean image
    apt-get clean && rm -rf /var/lib/apt/lists/*

# ────────────── 2. Node.js & npm ──────────────────────────────────────
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest

# ────────────── 3. Composer & WP-CLI ─────────────────────────────────
RUN curl -sS https://getcomposer.org/installer | php && \
    mv composer.phar /usr/local/bin/composer && chmod +x /usr/local/bin/composer && \
    curl -o /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
    chmod +x /usr/local/bin/wp

# ────────────── 4. Set php.ini & www.conf ─────────
ARG SERVER=16ram-4cpu

# Always copy the performance profile (must exist in build context under apache/${SERVER}/)
COPY ${SERVER}/php.ini /usr/local/etc/php/php.ini
COPY ${SERVER}/www.conf /usr/local/etc/php-fpm.d/www.conf

# ────────────── 5. Pete configs & helper scripts ─────────
COPY .gitconfig              /root/.gitconfig
COPY pete_install.sh /usr/local/bin/pete_install.sh
RUN chmod +x /usr/local/bin/pete_install.sh \
 && chown www-data:www-data /usr/local/bin/pete_install.sh \
 && apt-get update && apt-get install -y --no-install-recommends dos2unix && rm -rf /var/lib/apt/lists/* \
 && dos2unix /usr/local/bin/pete_install.sh || true

# sudo rules, pma template, etc. (same as before)
RUN mkdir -p /etc/sudoers.d /var/www/.ssh /data/wwwlog && \
    printf '%s\n' \
     'www-data ALL=(ALL) NOPASSWD: /usr/bin/git, /etc/init.d/apache2 reload, /usr/bin/update-alternatives, /var/www/html/Pete/scripts/*, /usr/bin/docker exec wp-pete-docker-apache-1 apachectl -k graceful' > /etc/sudoers.d/www-data && \
    chmod 440 /etc/sudoers.d/www-data && \
    chown -R www-data:www-data /var/www

COPY config.inc.php.custom /opt/pma-config/
RUN sed -i "s/^\(\$cfg\['blowfish_secret'\][[:space:]]*=[[:space:]]*\).*;/\1'__BLOWFISH__';/" \
        /opt/pma-config/config.inc.php.custom

# Disable client-side SSL requirement for MariaDB client tools
RUN mkdir -p /etc/mysql/conf.d && \
    printf "[client]\nssl=0\nskip_ssl\n\n[mysql]\nssl=0\nskip_ssl\n\n[mysqladmin]\nssl=0\nskip_ssl\n" \
    > /etc/mysql/conf.d/disable-ssl.cnf

#PROGRAMMING SHORTCUTS
RUN echo "alias gs='git status'" >> /etc/bash.bashrc
RUN echo "alias prompt='python3 prompt2.py -e prompt.env'" >> /etc/bash.bashrc
RUN echo "alias cphp='docker compose exec php bash'" >> /etc/bash.bashrc
RUN echo "alias capache='docker compose exec apache bash'" >> /etc/bash.bashrc
RUN echo "alias dbuild='docker compose up --build'" >> /etc/bash.bashrc
RUN echo "alias dphp='docker compose build php && docker compose up -d php'" >> /etc/bash.bashrc
RUN echo "alias dapache='docker compose build php && docker compose up -d php'" >> /etc/bash.bashrc


# ────────────── 6. Runtime defaults ──────────────────────────────────
WORKDIR /var/www/html
EXPOSE 9000

# Delegates to Pete’s installer, which eventually execs php-fpm
ENTRYPOINT ["/usr/local/bin/pete_install.sh"]
```

========================================

**apache/development/development.conf**
```
#######################################################################
# 1) MPM-event – concurrency limits (placeholders filled at boot)
#######################################################################

<IfModule mpm_event_module>
    StartServers          2
    ServerLimit           3
    ThreadsPerChild       64
    MaxRequestWorkers     192
    MinSpareThreads       32
    MaxSpareThreads       96
    MaxConnectionsPerChild 10000
    KeepAlive On
    KeepAliveTimeout 3
    MaxKeepAliveRequests 1000
</IfModule>

#######################################################################
# 2) Core server tweaks
#######################################################################
ServerTokens Prod
ServerSignature Off

#######################################################################
# 3) HTTP/2 (+ server push)
#######################################################################
Protocols h2 http/1.1
H2Push          on
H2PushPriority  *                       after
H2PushPriority  text/css                before
H2PushPriority  image/vnd.microsoft.icon after

# 4) Compression – gzip / deflate
#######################################################################
<IfModule mod_deflate.c>
     AddOutputFilterByType DEFLATE \
         text/html text/plain text/css text/xml text/javascript \
         application/javascript application/json image/svg+xml
 </IfModule>

# 5) Setting Apache CACHE
#######################################################################
<IfModule mod_cache_disk.c>
    CacheRoot    /var/cache/apache2/mod_cache_disk
</IfModule>

#######################################################################
# 6) ModSecurity – skip rules on static files to save CPU
#######################################################################
<IfModule security2_module>
  <LocationMatch "\.(?:ico|gif|jpe?g|png|svg|css|js)$">
      SecRuleEngine Off
  </LocationMatch>
```

========================================

**php/development/php.ini**
```
; ===== Resources =====
memory_limit = 512M
max_execution_time = 120
max_input_time = 60
max_input_vars = 4000

; uploads (adjust if you need bigger media)
post_max_size = 64M
upload_max_filesize = 64M

; security / noise
expose_php = Off
display_errors = Off
log_errors = On
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT

; ===== OPcache (no JIT for WP) =====
opcache.enable = 1
opcache.enable_cli = 0
opcache.jit = 0
opcache.memory_consumption = 320
opcache.interned_strings_buffer = 16
opcache.max_accelerated_files = 100000
opcache.validate_timestamps = 0   ; production
opcache.revalidate_freq = 0
opcache.save_comments = 1

; ===== Filesystem resolver speed =====
realpath_cache_size = 4096K
realpath_cache_ttl  = 600

; ===== Sessions / output =====
session.gc_probability = 1
session.gc_divisor = 1000
session.gc_maxlifetime = 28800
output_buffering = 0

; (Optional) Redis client niceties
; default_socket_timeout = 5
```

========================================

**php/development/www.conf**
```
[www]
; --- identity ---
user = www-data
group = www-data

; --- listen (you already proxy :9000) ---
listen = 0.0.0.0:9000
listen.backlog = 256
listen.owner = www-data
listen.group = www-data
listen.mode  = 0660

; --- process manager ---
pm = dynamic
pm.max_children = 36
pm.start_servers = 6
pm.min_spare_servers = 6
pm.max_spare_servers = 12
pm.max_requests = 1000
pm.process_idle_timeout = 10s

; --- observability ---
pm.status_path = /fpm-status
ping.path     = /fpm-ping

; --- slowlog (optional) ---
;request_slowlog_timeout = 3s
;slowlog = /var/log/php-fpm/slowlog.log

```

========================================

**apache/Dockerfile**
```
# ─────────────────────────────────────────────
# Apache (event) + ModSecurity 2 + OWASP CRS
# ─────────────────────────────────────────────
FROM debian:bookworm-slim
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    apt-get install -y --no-install-recommends logrotate \
      apache2 apache2-utils \
      libapache2-mod-security2 \
      certbot python3-certbot-apache \
      sudo curl ca-certificates vim-tiny && \
    rm -rf /var/lib/apt/lists/*

# 1) Provide ModSecurity rotation policy
COPY modsecurity.logrotate /etc/logrotate.d/modsecurity

# 2) Ensure logrotate state file exists (prevents duplicate rotations)
RUN mkdir -p /var/lib/logrotate && \
    touch /var/lib/logrotate/status && \
    chmod 0644 /var/lib/logrotate/status

# 3) Make sure the audit log exists and is writable (you already do this later, but harmless here)
RUN mkdir -p /var/log/apache2 && \
    touch /var/log/apache2/modsec_audit.log && \
    chown -R www-data:www-data /var/log/apache2 && \
    chmod 0640 /var/log/apache2/modsec_audit.log

# ---- patch the stock apache2 logrotate to stop rotating modsec_audit.log
# Replace the wildcard stanza "/var/log/apache2/*.log {" with an explicit list
# (access/error/other_vhosts_access only). This avoids duplicate handling.
RUN set -e; \
  tmp="$(mktemp)"; \
  awk 'BEGIN{re="^/var/log/apache2/\\*\\.log[[:space:]]*\\{"} \
       $0 ~ re {print "/var/log/apache2/access.log /var/log/apache2/error.log /var/log/apache2/other_vhosts_access.log {"; next} \
       {print}' /etc/logrotate.d/apache2 > "$tmp" \
  && cat "$tmp" > /etc/logrotate.d/apache2 \
  && rm -f "$tmp"

RUN a2dismod mpm_prefork && \
    a2enmod mpm_event proxy proxy_fcgi rewrite headers expires ssl \
            http2 deflate \
    && a2enmod cgid 

RUN ln -s /usr/bin/vim.tiny /usr/bin/vim
COPY status.conf /etc/apache2/mods-enabled/status.conf

#REFINE ACPACHE PERFORMANCE
ARG SERVER=16ram-4cpu

# Always copy the performance profile (must exist in build context under apache/${SERVER}/)
COPY ${SERVER}/performance.conf /etc/apache2/conf-available/performance.conf

# Only enable it in production
RUN a2enconf performance

# ── Install ModSecurity 2 and Debian’s CRS package ───────────────────────────
ARG CRS_VERSION=4.15.0
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      libapache2-mod-security2 \
      curl \
      ca-certificates && \
    \
    # Prepare ModSecurity dirs
    mkdir -p /etc/modsecurity /etc/modsecurity/rules /var/cache/modsecurity && \
    \
    # Copy base config
    cp /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf && \
    \
    # Download and extract OWASP CRS v${CRS_VERSION}
    curl -fsSL "https://github.com/coreruleset/coreruleset/archive/refs/tags/v${CRS_VERSION}.tar.gz" \
      -o /tmp/crs.tar.gz && \
    tar zxvf /tmp/crs.tar.gz -C /usr/share && \
    mv /usr/share/coreruleset-${CRS_VERSION} /usr/share/modsecurity-crs && \
    rm /tmp/crs.tar.gz && \
    \
    # Copy CRS example setup into place
    cp /usr/share/modsecurity-crs/crs-setup.conf.example /etc/modsecurity/crs-setup.conf && \
    \
    # Symlink all rule and data files
    ln -sf /usr/share/modsecurity-crs/rules/*.conf /etc/modsecurity/rules/ && \
    ln -sf /usr/share/modsecurity-crs/rules/*.data /etc/modsecurity/rules/

# ── Copy our Apache include that loads mod_security2 + CRS ───────────────────
COPY modsecurity-apache.conf /etc/apache2/conf-available/modsecurity.conf
COPY whitelist.conf /etc/modsecurity/whitelist.conf

# ── Enable security2, drop any default, enable ours, turn engine ON, test syntax ─
RUN a2enmod security2 \
 && rm -f /etc/apache2/mods-enabled/security2.conf \
 && a2enconf modsecurity \
 && sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/' /etc/modsecurity/modsecurity.conf \
 \
 # enable JSON output for the audit log
 && echo 'SecAuditLogFormat JSON' >> /etc/modsecurity/modsecurity.conf \
 \
 && apache2ctl configtest

# ── make sure Apache can write its own logs ──────────────────────────────
RUN set -e \
 && mkdir -p /var/log/apache2 \
 && touch      /var/log/apache2/modsec_audit.log \
 && chown -R www-data:www-data /var/log/apache2 \
 && chmod 750 /var/log/apache2

# 4) Reload-hook CGI
ARG APACHE_RELOAD_SECRET
COPY reload_apache.cgi /usr/local/bin/
RUN sed -i "s@__RELOAD_SECRET__@${APACHE_RELOAD_SECRET}@" /usr/local/bin/reload_apache.cgi \
 && chmod 755 /usr/local/bin/reload_apache.cgi

COPY issue_cert.cgi /usr/local/bin/
RUN sed -i "s@__RELOAD_SECRET__@${APACHE_RELOAD_SECRET}@" /usr/local/bin/issue_cert.cgi \
    && chmod 755 /usr/local/bin/issue_cert.cgi

COPY toggle_modsec.sh /usr/local/bin/
RUN chmod 755  /usr/local/bin/toggle_modsec.sh \
    && chown root:root /usr/local/bin/toggle_modsec.sh

COPY modsecurity_status.cgi /usr/local/bin/
RUN sed -i "s@__RELOAD_SECRET__@${APACHE_RELOAD_SECRET}@" /usr/local/bin/modsecurity_status.cgi \
    && chmod 755 /usr/local/bin/modsecurity_status.cgi


# 5) Pete & phpMyAdmin base vhosts
COPY pete.conf /etc/apache2/sites-available/000-pete.conf
COPY phpmyadmin.conf   /etc/apache2/sites-available/
COPY whitelist.conf    /etc/modsecurity/whitelist.conf
COPY modsecurity-apache.conf /etc/apache2/conf-available/modsecurity.conf

# 6) Make vhost dirs shared & writable *before* volume is created
RUN chown -R www-data:www-data /etc/apache2/sites-available /etc/apache2/sites-enabled

# 7) Enable baseline sites & configs (done once at build-time)
RUN a2ensite 000-pete.conf && \
    a2enconf modsecurity && \
    a2dissite 000-default.conf

# 8) Allow www-data (CGI) to reload Apache
RUN printf '%s\n' \
  'www-data ALL=(root) NOPASSWD: /usr/sbin/apachectl -k graceful' \
  'www-data ALL=(root) NOPASSWD: /usr/bin/certbot' \
  'www-data ALL=(root) NOPASSWD: /usr/bin/certbot renew' \
  'www-data ALL=(root) NOPASSWD: /usr/local/bin/toggle_modsec.sh' \
  'Defaults:www-data !requiretty' \
  > /etc/sudoers.d/www-data && chmod 440 /etc/sudoers.d/www-data

RUN echo 'ServerName localhost' >> /etc/apache2/apache2.conf
WORKDIR /var/www/html
EXPOSE 80

# wait-helper script
COPY start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh \
 && apt-get update && apt-get install -y --no-install-recommends dos2unix && rm -rf /var/lib/apt/lists/* \
 && dos2unix /usr/local/bin/start.sh \
             /usr/local/bin/reload_apache.cgi \
             /usr/local/bin/issue_cert.cgi \
             /usr/local/bin/modsecurity_status.cgi \
             /usr/local/bin/toggle_modsec.sh || true

# --- new: ensure volume will be writable by Pete ---
RUN mkdir -p /var/www/html && chown -R www-data:www-data /var/www/html

CMD ["/usr/local/bin/start.sh"]

```

========================================

**apache/start.sh**
```bash
#!/bin/bash
set -e

# Wait until PHP (Pete installer) has populated the volume
echo "Waiting for Pete document root…"
while [ ! -d "/var/www/html/Pete/public" ]; do
  sleep 2
done

mkdir -p /var/log/apache2
touch    /var/log/apache2/modsec_audit.log
chown -R www-data:www-data /var/log/apache2
chmod 750 /var/log/apache2

# Ensure log directory exists
mkdir -p /var/www/html/wwwlog/Pete

mkdir -p /var/cache/apache2/mod_cache_disk/tmp
chown -R www-data:www-data /var/cache/apache2
chmod -R 750 /var/cache/apache2  
chmod 750 /var/cache/apache2/mod_cache_disk/tmp


# --- ADD THIS BLOCK ---------------------------------------------------
# Lightweight logrotate scheduler (no cron needed)
if command -v logrotate >/dev/null 2>&1; then
  LOGROTATE_CONF="/etc/logrotate.conf"
  LOGROTATE_STATE="/var/lib/logrotate/status"
  INTERVAL="${LOGROTATE_INTERVAL:-86400}"    # seconds; default: 24h

  (
    # Run once immediately to catch an oversized file at boot
    /usr/sbin/logrotate -s "$LOGROTATE_STATE" "$LOGROTATE_CONF" || true
    # Then loop forever
    while sleep "$INTERVAL"; do
      /usr/sbin/logrotate -s "$LOGROTATE_STATE" "$LOGROTATE_CONF" || true
    done
  ) &
fi

exec apachectl -D FOREGROUND





```

========================================

**php/pete_install.sh**
```bash
#!/bin/bash
set -e

# 1) Wait for MySQL to be ready
echo "Waiting for MySQL..."
until mysqladmin --skip-ssl ping -h db --silent; do
  sleep 3
done

chown -R www-data:www-data /var/www/html /etc/apache2/sites-* 2>/dev/null || true

# 3) Full Pete install (only once)
if [ ! -f /var/www/html/.installed ]; then
  echo "#######################################"
  echo "Starting Pete Panel installation..."
  echo "#######################################"

  mkdir -p /var/www/html/wwwlog/Pete
  chown -R www-data:www-data /var/www/html/wwwlog
  rm -rf /var/www/html/Pete
  cd /var/www/html

  git clone https://ozone777@bitbucket.org/ozone777/wordpresspete3.git Pete
  cd Pete

  git fetch --tags
  latestTag=$(git describe --tags `git rev-list --tags --max-count=1`)
  git checkout $latestTag

  # Reset composer & env
  rm -f auth.json composer.json
  cp composer_original.json composer.json
  cp .env.example .env

  cat <<EOF >> .env
DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=${PETE_DB_NAME}
DB_USERNAME=${PETE_DB_USER}
DB_PASSWORD=${PETE_DB_PASSWORD}
PETE_ROOT_PASS=${PETE_ROOT_PASSWORD}
APACHE_RELOAD_URL=${APACHE_RELOAD_URL}
APACHE_RELOAD_SECRET=${APACHE_RELOAD_SECRET}
APACHE_CERTBOT_URL=${APACHE_CERTBOT_URL}
PETE_DASHBOARD_URL=https://dashboard.deploypete.com
PETE_DEMO=inactive
PETE_ENVIRONMENT=production
PETE_DEBUG=inactive
EOF

  # Install PHP deps & migrate
  rm -rf vendor

  mysql --protocol=TCP -h db -uroot -p"${PETE_ROOT_PASSWORD}" <<SQL
CREATE DATABASE IF NOT EXISTS \`${PETE_DB_NAME}\`
  CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

CREATE USER IF NOT EXISTS '${PETE_DB_USER}'@'%' IDENTIFIED BY '${PETE_DB_PASSWORD}';
GRANT ALL PRIVILEGES ON \`${PETE_DB_NAME}\`.* TO '${PETE_DB_USER}'@'%';
FLUSH PRIVILEGES;

USE \`${PETE_DB_NAME}\`;
CREATE TABLE IF NOT EXISTS \`options\` (
  \`id\` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  \`option_name\` VARCHAR(191) NOT NULL UNIQUE,
  \`title\` VARCHAR(191) NULL,
  \`category\` VARCHAR(191) NULL,
  \`visible\` VARCHAR(191) NULL,
  \`option_value\` LONGTEXT NULL,
  \`option_date\` DATETIME NULL,
  \`version\` VARCHAR(50) NULL,
  \`created_at\` TIMESTAMP NULL,
  \`updated_at\` TIMESTAMP NULL,
  PRIMARY KEY (\`id\`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL


  # 1) install vendor WITHOUT running composer scripts (avoids package:discover early)
  COMPOSER_CACHE_DIR=/dev/null composer install --ignore-platform-reqs --prefer-dist --no-dev --no-scripts

  # ensure DB + placeholder 'options' table exist before any artisan command


  # 2) app key first (so Laravel can boot)
  php artisan key:generate

  # 3) create tables BEFORE discovery; use --force in case APP_ENV=production
  php artisan migrate --force

  # 4) now it’s safe to run discovery (and any other composer scripts)
  php artisan package:discover --ansi
  # (optional but recommended)
  php artisan config:cache
  php artisan route:cache

  # Add general options
  php artisan addoption --option_name=os --option_value=docker
  php artisan addoption --option_name=server_status --option_value=off
  php artisan addoption --option_name=parent_version --option_value=13
  php artisan addoption --option_name=version --option_value="$latestTag"
  php artisan addoption --option_name=app_root --option_value=/var/www/html
  php artisan addoption --option_name=server_conf --option_value=/etc/apache2/sites-available
  php artisan addoption --option_name=server --option_value=apache
  php artisan addoption --option_name=server_version --option_value=24
  php artisan addoption --option_name=os_version --option_value=bionic
  php artisan addoption --option_name=os_distribution --option_value=ubuntu
  php artisan addoption --option_name=logs_route --option_value=/var/www/html/wwwlog
  php artisan addoption --option_name=os_stack --option_value=apache_mpm_prefork
  php artisan addoption --option_name=phpmyadmin_status --option_value=off

  # Create needed dirs & perms
  mkdir -p public/uploads public/export trash storage storage/logs
  touch storage/logs/laravel.log
  mkdir -p /var/www/html/wwwlog/Pete /var/www/html/wwwlog/example1
  composer dump-autoload --ignore-platform-reqs

  # Mark as installed
  chown -R www-data:www-data /var/www/html/Pete 
  echo "done" > /var/www/html/.installed
  echo "#######################################"
  echo "WordPress Pete installation completed"
  echo "#######################################"

fi

# 4) Post-install setup
echo "#######################################"
echo "Launching WordPress Pete..."
echo "#######################################"

# SSH key (for private repos, if needed)
SSH_USER="www-data"
SSH_HOME="$(getent passwd ${SSH_USER} | cut -d: -f6 || echo /var/www)"
SSH_DIR="${SSH_HOME}/.ssh"

# Create ~/.ssh with correct perms/owner
install -d -m 700 -o "${SSH_USER}" -g "${SSH_USER}" "${SSH_DIR}"

# Prefer ed25519; fall back to rsa if needed. Only generate if none exists.
if [ ! -f "${SSH_DIR}/id_ed25519.pub" ] && [ ! -f "${SSH_DIR}/id_rsa.pub" ]; then
  # Try ed25519 first
  if sudo -u "${SSH_USER}" ssh-keygen -t ed25519 -N "" \
        -C "www-data@$(hostname -f 2>/dev/null || hostname)" \
        -f "${SSH_DIR}/id_ed25519" >/dev/null 2>&1; then
    :
  else
    # ed25519 might be unavailable on very old images; use rsa as fallback
    sudo -u "${SSH_USER}" ssh-keygen -t rsa -b 4096 -N "" \
        -C "www-data@$(hostname -f 2>/dev/null || hostname)" \
        -f "${SSH_DIR}/id_rsa" >/dev/null 2>&1
  fi
fi

# Preload known_hosts to avoid interactive prompts on first git fetch/clone
# (add the hosts you use—Bitbucket/GitHub shown here)
for host in github.com bitbucket.org; do
  if ! sudo -u "${SSH_USER}" sh -lc "ssh-keygen -F ${host} >/dev/null"; then
    ssh-keyscan -T 5 "${host}" >> "${SSH_DIR}/known_hosts" 2>/dev/null || true
  fi
done

# Tighten permissions (SSH is strict)
chmod 700 "${SSH_DIR}"
chmod 600 "${SSH_DIR}"/id_* 2>/dev/null || true
chmod 644 "${SSH_DIR}"/id_*.pub "${SSH_DIR}/known_hosts" 2>/dev/null || true
chown -R "${SSH_USER}:${SSH_USER}" "${SSH_DIR}"


###############################################################################
# Root user SSH key (useful for admin/one-off git or sftp tasks)
###############################################################################
ROOT_SSH_DIR="/root/.ssh"
install -d -m 700 "${ROOT_SSH_DIR}"

# Generate a key only if none exist yet (prefer ed25519; fallback to rsa)
if [ ! -f "${ROOT_SSH_DIR}/id_ed25519.pub" ] && [ ! -f "${ROOT_SSH_DIR}/id_rsa.pub" ]; then
  if ssh-keygen -t ed25519 -N "" \
        -C "root@$(hostname -f 2>/dev/null || hostname)" \
        -f "${ROOT_SSH_DIR}/id_ed25519" >/dev/null 2>&1; then
    :
  else
    ssh-keygen -t rsa -b 4096 -N "" \
        -C "root@$(hostname -f 2>/dev/null || hostname)" \
        -f "${ROOT_SSH_DIR}/id_rsa" >/dev/null 2>&1
  fi
fi

# Preload known_hosts (avoids prompts on first clone/fetch)
for host in github.com bitbucket.org; do
  if ! ssh-keygen -F "${host}" >/dev/null 2>&1; then
    ssh-keyscan -T 5 "${host}" >> "${ROOT_SSH_DIR}/known_hosts" 2>/dev/null || true
  fi
done

# Strict permissions for SSH
chmod 700 "${ROOT_SSH_DIR}"
chmod 600 "${ROOT_SSH_DIR}"/id_* 2>/dev/null || true
chmod 644 "${ROOT_SSH_DIR}"/id_*.pub "${ROOT_SSH_DIR}/known_hosts" 2>/dev/null || true

echo "Root SSH public key(s):"
ls -1 "${ROOT_SSH_DIR}"/id_*.pub 2>/dev/null || true
###############################################################################

#domain_template for development
pete_environment=${PETE_ENVIRONMENT}
if [ "$pete_environment" = "development" ]; then
  cd /var/www/html/Pete && php artisan addoption --option_name=domain_template --option_value=petelocal.net
  cd /var/www/html/Pete && php artisan addoption --option_name=environment --option_value=development
  echo "cd /var/www/html/Pete/scripts && sudo ./toggle_security.sh -v $APACHE_RELOAD_SECRET -s off -k active"
  cd /var/www/html/Pete/scripts && sudo ./toggle_security.sh -v $APACHE_RELOAD_SECRET -s off -k active
  cd /var/www/html/Pete && php artisan addoption --option_name=security_status --option_value=off
else
  cd /var/www/html/Pete && php artisan addoption --option_name=environment --option_value=production
  php artisan addoption --option_name=security_status --option_value=on
fi

###############################################################################
# phpMyAdmin bootstrap (runs only once per empty pma_data volume)
###############################################################################
PMA_DIR="/usr/src/phpmyadmin"                      # shared volume mount-point
PMA_CFG_TMPL="/opt/pma-config/config.inc.php.custom"
PMA_CFG_DEST="${PMA_DIR}/config.inc.php"
PMA_VERSION="5.2.2"

if [ ! -f "${PMA_DIR}/index.php" ]; then
    echo "→ Installing phpMyAdmin ${PMA_VERSION} into ${PMA_DIR} …"
    curl -fsSL \
      "https://files.phpmyadmin.net/phpMyAdmin/${PMA_VERSION}/phpMyAdmin-${PMA_VERSION}-all-languages.tar.gz" \
      -o /tmp/pma.tar.gz
    mkdir -p "${PMA_DIR}"
    tar -xzf /tmp/pma.tar.gz --strip-components=1 -C "${PMA_DIR}"
    rm /tmp/pma.tar.gz
fi

# ---------------------------------------------------------------------------
# Copy / template the main config only if it does not exist yet
# ---------------------------------------------------------------------------
if [ ! -f "${PMA_CFG_DEST}" ] && [ -f "${PMA_CFG_TMPL}" ]; then
    echo "→ Creating phpMyAdmin config …"

    # Use the secret from .env, or generate one on the fly
    BF_SECRET=${BLOWFISH_SECRET:-$(head -c32 /dev/urandom | base64)}

    # Copy template → destination, substituting the placeholder
    sed "s#__BLOWFISH__#${BF_SECRET}#" "${PMA_CFG_TMPL}" > "${PMA_CFG_DEST}"
    chown www-data:www-data "${PMA_CFG_DEST}"
fi
###############################################################################


# 5) Finally delegate to the official Apache entrypoint
exec php-fpm 

```

========================================

**db/Dockerfile**
```
FROM mariadb:10.6

# your existing init stuff
COPY init.sh /docker-entrypoint-initdb.d/init.sh
RUN apt-get update && apt-get install -y --no-install-recommends dos2unix \
 && find /docker-entrypoint-initdb.d -type f -name "*.sh" -exec dos2unix {} \; \
 && chmod +x /docker-entrypoint-initdb.d/*.sh \
 && rm -rf /var/lib/apt/lists/*

#REFINE ACPACHE PERFORMANCE
ARG SERVER=16ram-4cpu

# Always copy the performance profile (must exist in build context under apache/${SERVER}/)
COPY ${SERVER}/99-pete.cnf /etc/mysql/conf.d/99-pete.cnf
RUN chmod 0644 /etc/mysql/conf.d/99-pete.cnf
```

========================================

**db/development/99-pete.cnf**
```
[mysqld]
# ─── Core sizing for 8G cgroup cap (reserve ~6G for InnoDB) ───
innodb_buffer_pool_size = 6G

# Redo logs & durability
innodb_log_file_size    = 1G
innodb_log_buffer_size  = 256M
innodb_flush_log_at_trx_commit = 1

# SSD-friendly I/O
innodb_flush_method      = O_DIRECT
innodb_flush_neighbors   = 0
innodb_io_capacity       = 2000
innodb_io_capacity_max   = 4000

# Threads (supported in 10.6)
innodb_read_io_threads   = 4
innodb_write_io_threads  = 4

# Connections / caches
max_connections          = 200
table_open_cache         = 4000
table_definition_cache   = 2000
open_files_limit         = 262144

# Per-connection buffers (keep conservative)
max_allowed_packet       = 256M
tmp_table_size           = 128M
max_heap_table_size      = 128M
sort_buffer_size         = 4M
join_buffer_size         = 4M
read_buffer_size         = 2M
read_rnd_buffer_size     = 4M
tmpdir = /tmp

# Startup warmup
innodb_buffer_pool_load_at_startup  = 1
innodb_buffer_pool_dump_at_shutdown = 1

# General
character-set-server     = utf8mb4
collation-server         = utf8mb4_unicode_ci
skip-name-resolve
sql_mode                 = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
query_cache_type         = 0
query_cache_size         = 0

# Aria (used by system/tmp in MariaDB)
aria_pagecache_buffer_size = 256M
aria_sort_buffer_size      = 128M

performance_schema = ON

# SSL disabled per your setup
ssl=0
skip_ssl

[client]
ssl=0

```

========================================

**db/init.sh**
```bash
#!/usr/bin/env bash
set -e

echo ">>> Initializing WordPress & Pete databases…"

mysql -u root -p"$MYSQL_ROOT_PASSWORD" <<-EOSQL

  CREATE DATABASE IF NOT EXISTS \`${PETE_DB_NAME}\`
    CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
  CREATE USER IF NOT EXISTS '${PETE_DB_USER}'@'%'
    IDENTIFIED BY '${PETE_DB_PASS}';
  GRANT ALL PRIVILEGES ON \`${PETE_DB_NAME}\`.* TO '${PETE_DB_USER}'@'%';

  GRANT CREATE, DROP, ALTER, INDEX ON *.* TO '${PETE_DB_USER}'@'%';

  FLUSH PRIVILEGES;
EOSQL

```

========================================

**docker-compose.yml**
```
services:
  apache:
    build:
      context: ./apache
      args:
        APACHE_RELOAD_SECRET: ${APACHE_RELOAD_SECRET}
        SERVER: development
    restart: always
    volumes:
      - wp_data:/var/www/html           
      - apache_sites_available:/etc/apache2/sites-available
      - apache_sites_enabled:/etc/apache2/sites-enabled
      - pma_data:/usr/src/phpmyadmin:ro
      - ssl_data:/etc/letsencrypt
      - apache_logs:/var/log/apache2 
    environment:
      APACHE_RELOAD_SECRET: ${APACHE_RELOAD_SECRET}
      APACHE_RELOAD_URL: ${APACHE_RELOAD_URL}
      APACHE_CERTBOT_URL: ${APACHE_CERTBOT_URL}
      TMPDIR: /var/cache/apache2/mod_cache_disk/tmp
      LOGROTATE_INTERVAL: 43200 
    ports:
      - "80:80"
      - "443:443"
    networks:
      default:
        aliases:
          - demo3.petelocal.net
          - demo3.wordpresspete.org
          - wordpresspete.petelocal.net
          - dashboard.wordpresspete.petelocal.net
          - mydashboard.wordpresspete.petelocal.net
          - dashboard.wordpresspete.com
          - dashboard.deploypete.petelocal.net
          - deploypete.petelocal.net
  php:
    build:
      context: ./php
      args:
        PETE_ENVIRONMENT: "${PETE_ENVIRONMENT}"
        PHP_VERSION: "${PHP_VERSION}"
        SERVER: development
    restart: always
    depends_on:                # ← php waits for apache, db, redis
      - apache
      - db
      - redis
    expose:
      - "9000"                           
    volumes:
      - wp_data:/var/www/html
      - ssh_data:/var/www/.ssh
      - ssh_data:/root/.ssh
      - apache_sites_available:/etc/apache2/sites-available
      - apache_sites_enabled:/etc/apache2/sites-enabled
      - pma_data:/usr/src/phpmyadmin
      - ssl_data:/etc/letsencrypt
      - apache_logs:/var/log/apache2      
    env_file: .env                       
    environment:
      WORDPRESS_DB_HOST: db:3306
      PETE_DB_NAME: ${PETE_DB_NAME}
      PETE_DB_USER: ${PETE_DB_USER}
      PETE_DB_PASSWORD: ${PETE_DB_PASS}
      PETE_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      PETE_ENVIRONMENT: ${PETE_ENVIRONMENT}
      APACHE_RELOAD_SECRET: ${APACHE_RELOAD_SECRET}
      APACHE_RELOAD_URL: ${APACHE_RELOAD_URL}
      APACHE_CERTBOT_URL: ${APACHE_CERTBOT_URL}
      REDIS_HOST: redis
      PHP_VERSION: 8.2
  db:
    build:
      context: ./db
      args:
        SERVER: development
    volumes:
      - db_data:/var/lib/mysql
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

  redis:
    image: redis:7-alpine
    restart: always

volumes:
  wp_data:
  db_data:
  ssh_data:
  apache_sites_available:
  apache_sites_enabled:
  pma_data:
  ssl_data:
  apache_logs:
```

