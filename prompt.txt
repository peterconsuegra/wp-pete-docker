**Context:** You are an experienced DevOps devolver with extensive knowlege in Docker. Below are the code files of a Docker LAMP app

**docker-compose.yml**
```
version: "3.8"

services:
  # 1) WordPress + PHP-Apache
  wordpress:
    build: ./wordpress
    restart: always
    volumes:
      - wp_data:/var/www/html
    env_file: .env
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: ${DB_USER}
      WORDPRESS_DB_PASSWORD: ${DB_PASS}
      WORDPRESS_DB_NAME: ${DB_NAME}
      PETE_DB_NAME: ${PETE_DB_NAME}
      PETE_DB_USER: ${PETE_DB_USER}
      PETE_DB_PASSWORD: ${PETE_DB_PASS}
      REDIS_HOST: redis
    depends_on:
      - db
      - redis
    ports:
      - "8000:80"

  # 2) MariaDB
  db:
    image: mariadb:10.6
    restart: always
    volumes:
      - db_data:/var/lib/mysql
      - ./db-config/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./db-config/init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    env_file: .env
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER:     ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

  # 3) Redis for object caching
  redis:
    image: redis:7-alpine
    restart: always

  # 4) phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      PMA_USER: ${DB_USER}
      PMA_PASSWORD: ${DB_PASS}
    depends_on:
      - db

volumes:
  wp_data:
  db_data:
```

========================================

**wordpress/Dockerfile**
```
FROM php:8.1-apache

# 1) Install PHP extensions, MySQL client, and tools
RUN apt-get update \
 && apt-get install -y \
      default-mysql-client \
      vim \
      libfreetype6-dev \
      libjpeg62-turbo-dev \
      libpng-dev \
      libzip-dev \
      zip \
      unzip \
      git \
      libonig-dev \
      libxml2-dev \
 && docker-php-ext-configure gd --with-freetype --with-jpeg \
 && docker-php-ext-install -j"$(nproc)" \
      mysqli \
      pdo \
      pdo_mysql \
      gd \
      zip \
      opcache \
 && mkdir -p /tmp/pear/temp \
 && chmod -R 0777 /tmp/pear \
 && pecl install redis \
 && docker-php-ext-enable redis \
 && rm -rf /var/lib/apt/lists/*

# 2) Enable Apache modules
RUN a2enmod rewrite headers expires

# 3) Copy custom php.ini
COPY php.ini /usr/local/etc/php/

# 4) Download & unpack WordPress core
RUN curl -o /tmp/wordpress.tar.gz https://wordpress.org/latest.tar.gz \
 && tar -xzf /tmp/wordpress.tar.gz --strip-components=1 -C /var/www/html \
 && rm /tmp/wordpress.tar.gz \
 && chown -R www-data:www-data /var/www/html

# 5) Set working dir & ensure ownership
WORKDIR /var/www/html
RUN chown -R www-data:www-data /var/www/html

# 6) (Optional) Install WP-CLI
RUN curl -o /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \
 && chmod +x /usr/local/bin/wp

# Silence Apache FQDN warning
RUN echo "ServerName localhost" >> /etc/apache2/apache2.conf

# ðŸ‘‡ Install Composer globally
RUN curl -sS https://getcomposer.org/installer | php \
  && mv composer.phar /usr/local/bin/composer \
  && chmod +x /usr/local/bin/composer

# Copy and set entrypoint script
COPY pete_install.sh /usr/local/bin/pete_install.sh
RUN chmod +x /usr/local/bin/pete_install.sh \
 && chown www-data:www-data /usr/local/bin/pete_install.sh

EXPOSE 80

USER www-data

ENTRYPOINT ["/usr/local/bin/pete_install.sh"]
CMD ["apache2-foreground"]

```

========================================

**db-config/my.cnf**
```
[mysqld]
innodb_buffer_pool_size = 1G
innodb_log_file_size    = 256M
innodb_flush_log_at_trx_commit = 2
query_cache_type = 0
skip-name-resolve
```

========================================

**wordpress/pete_install.sh**
```bash
#!/bin/bash
set -e

# 1) Wait for MySQL to be ready
echo "Waiting for MySQL..."
until mysqladmin ping -h db -u"$DB_USER" -p"$DB_PASS" --silent; do
  sleep 3
done

# 2) Bootstrap wp-config.php if missing
WP_CONFIG=/var/www/html/wp-config.php
if [ ! -f "$WP_CONFIG" ]; then
  cp /var/www/html/wp-config-sample.php "$WP_CONFIG"
  sed -i "s/database_name_here/${DB_NAME}/" "$WP_CONFIG"
  sed -i "s/username_here/${DB_USER}/" "$WP_CONFIG"
  sed -i "s/password_here/${DB_PASS}/" "$WP_CONFIG"
  sed -i "s/'DB_HOST', 'localhost'/'DB_HOST', 'db'/" "$WP_CONFIG"
  chown www-data:www-data "$WP_CONFIG"
fi

# 3) Full Pete install (only once)
if [ ! -f /var/www/html/.installed ]; then
  echo "#######################################"
  echo "Starting WordPress Pete installation..."
  echo "#######################################"

  rm -rf /var/www/html/Pete
  cd /var/www/html

  git clone https://ozone777@bitbucket.org/ozone777/wordpresspete3.git Pete
  cd Pete

  git fetch --tags
  latestTag=$(git describe --tags $(git rev-list --tags --max-count=1))
  git checkout "$latestTag"

  # Reset composer & env
  rm -f auth.json composer.json
  cp composer_original.json composer.json
  cp .env.example .env

  cat <<EOF >> .env
DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=${PETE_DB_NAME}
DB_USERNAME=${PETE_DB_USER}
DB_PASSWORD=${PETE_DB_PASSWORD}
PETE_ROOT_PASS=${PETE_DB_PASSWORD}
PETE_DASHBOARD_URL=https://dashboard.wordpresspete.com
PETE_DEMO=inactive
PETE_ENVIRONMENT=production
PETE_DEBUG=inactive
EOF

cat .env


  # Install PHP deps & migrate
  rm -rf vendor
  COMPOSER_CACHE_DIR=/dev/null composer install --ignore-platform-reqs --prefer-dist --no-dev
  php artisan key:generate
  php artisan migrate

  # Add general options
  php artisan addoption --option_name=os --option_value=docker
  php artisan addoption --option_name=server_status --option_value=off
  php artisan addoption --option_name=parent_version --option_value=6
  php artisan addoption --option_name=version --option_value="$latestTag"
  php artisan addoption --option_name=app_root --option_value=/var/www/html
  php artisan addoption --option_name=server_conf --option_value="$conf_route"
  php artisan addoption --option_name=server --option_value=apache
  php artisan addoption --option_name=server_version --option_value=24
  php artisan addoption --option_name=os_version --option_value=bionic
  php artisan addoption --option_name=os_distribution --option_value=docker
  php artisan addoption --option_name=logs_route --option_value=/var/www/html/wwwlog
  php artisan addoption --option_name=os_stack --option_value=apache_mpm_prefork

  # Create needed dirs & perms
  mkdir -p public/uploads public/export trash storage storage/logs
  touch storage/logs/laravel.log
  mkdir -p /var/www/html/wwwlog/Pete /var/www/html/wwwlog/example1
  composer dump-autoload --ignore-platform-reqs

  # Mark as installed
  echo "done" > /var/www/html/.installed
  echo "#######################################"
  echo "WordPress Pete installation completed"
  echo "#######################################"

  # Install mod_sec_report dependencies
  cd /var/www/html/Pete/mod_sec_report && pip install -r requirements.txt
  chmod 755 /var/www/html/Pete/mod_sec_report/mod_sec_report
fi

# 4) Post-install setup
echo "#######################################"
echo "Launching WordPress Pete..."
echo "#######################################"

# Domain template
cd /var/www/html/Pete && php artisan addoption --option_name=domain_template --option_value="${DOMAIN_TEMPLATE:-}"

# SSH key (for private repos, if needed)
if [ ! -f /var/www/.ssh/id_rsa.pub ]; then
  mkdir -p /var/www/.ssh
  ssh-keygen -t rsa -N "" -f /var/www/.ssh/id_rsa
  chmod 600 /var/www/.ssh/id_rsa*
  chown -R www-data:www-data /var/www/.ssh
fi

# ModSecurity flag
if [ "$MOD_SECURITY" = "On" ]; then
  cd /var/www/html/Pete && php artisan addoption --option_name=security_status --option_value=on
else
  cd /var/www/html/Pete && php artisan addoption --option_name=security_status --option_value=off
fi

# Server-status flag
if [ "$SERVER_STATUS" = "On" ]; then
  cd /var/www/html/Pete && php artisan addoption --option_name=server_status --option_value=on
else
  cd /var/www/html/Pete && php artisan addoption --option_name=server_status --option_value=off
fi

# Ensure correct permissions
chown -R www-data:www-data /var/www/html

# 5) Finally delegate to the official Apache entrypoint
exec docker-php-entrypoint "$@"

```

========================================

**db-config/init.sh**
```bash
#!/usr/bin/env bash
set -e

echo ">>> Initializing WordPress & Pete databasesâ€¦"

mysql -u root -p"$MYSQL_ROOT_PASSWORD" <<-EOSQL
  CREATE DATABASE IF NOT EXISTS \`${DB_NAME}\`
    CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
  CREATE USER IF NOT EXISTS '${DB_USER}'@'%'
    IDENTIFIED BY '${DB_PASS}';
  GRANT ALL PRIVILEGES ON \`${DB_NAME}\`.* TO '${DB_USER}'@'%';

  CREATE DATABASE IF NOT EXISTS \`${PETE_DB_NAME}\`
    CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
  CREATE USER IF NOT EXISTS '${PETE_DB_USER}'@'%'
    IDENTIFIED BY '${PETE_DB_PASS}';
  GRANT ALL PRIVILEGES ON \`${PETE_DB_NAME}\`.* TO '${PETE_DB_USER}'@'%';

  FLUSH PRIVILEGES;
EOSQL

```
