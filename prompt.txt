**Context:** You are an experienced DevOps devolver with extensive knowlege in Docker. Below are the code files of a Docker LAMP app

**apache/modsecurity_status.cgi**
```
#!/bin/bash
# --------------------------------------------------------------------
# /usr/local/bin/modsecurity_status.cgi
#
# Toggle ModSecurity’s SecRuleEngine (On | Off) from a Pete admin call.
#  • Verifies X-Reload-Secret header.
#  • Expects ?sw=on|off query param.
#  • Delegates the sensitive work to /usr/local/bin/toggle_modsec.sh,
#    executed via sudo without a password or TTY (see sudoers rule).
#  • Emits MODSECURITY_SUCCESS | MODSECURITY_FAILED banner, mirroring
#    the style of issue_cert.cgi so Laravel can parse it if desired.
# --------------------------------------------------------------------

SECRET="__RELOAD_SECRET__"          # ⬅ replaced at build time
HELPER="/usr/local/bin/toggle_modsec.sh"

echo "Content-Type: text/plain"
echo

#Header-based authentication
if [ "$HTTP_X_RELOAD_SECRET" != "$SECRET" ] ; then
  echo "Forbidden"
  exit 0
fi

#2 Query-string parsing (?sw=on|off)
SW=""
IFS='&' read -ra KV <<< "$QUERY_STRING"
for kv in "${KV[@]}"; do
  k="${kv%%=*}" ; v="${kv#*=}"
  [ "$k" = "sw" ] && SW="$v"
done

case "$SW" in
  on|off) ;;                      
  *) echo "Usage: ?sw=on|off" ; exit 0 ;;
esac

#3Run helper via sudo (NOPASSWD, !requiretty)
echo ">>> sudo $HELPER $SW"
OUT=$(sudo -n "$HELPER" "$SW" 2>&1)
CODE=$?

echo "$OUT"
echo ">>> exit-code: $CODE"

if [ $CODE -eq 0 ]; then
  echo "MODSECURITY_SUCCESS"
else
  echo "MODSECURITY_FAILED"
fi

exit 0

```

========================================

**apache/pete.conf**
```
<VirtualHost _default_:80>
    ServerName localhost
    DocumentRoot /var/www/html/Pete/public

    <Directory /var/www/html/Pete/public>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    # send PHP to FPM
    <FilesMatch "\.php$">
        SetHandler "proxy:fcgi://php:9000"
    </FilesMatch>

    # graceful-reload hook (now inside the vhost)
    ScriptAlias /internal-reload /usr/local/bin/reload_apache.cgi
    <Directory "/usr/local/bin">
        Options +ExecCGI
        Require local
        Require ip 172.16.0.0/12
    </Directory>

    ScriptAlias /internal-certbot /usr/local/bin/issue_cert.cgi
    <Directory "/usr/local/bin">
        Options +ExecCGI
        Require local
        Require ip 172.16.0.0/12
    </Directory>

    ScriptAlias /modsecurity-status /usr/local/bin/modsecurity_status.cgi
    <Directory "/usr/local/bin">
        Options +ExecCGI
        Require local
        Require ip 172.16.0.0/12
    </Directory>

    LogLevel debug
    ErrorLog  /var/www/html/wwwlog/Pete/error.log
    CustomLog /var/www/html/wwwlog/Pete/access.log combined
</VirtualHost>
```

========================================

**apache/issue_cert.cgi**
```
#!/bin/bash
# --------------------------------------------------------------------
# Trigger Certbot inside the Apache container
# --------------------------------------------------------------------
SECRET="__RELOAD_SECRET__"        # substituted at build time

echo "Content-Type: text/plain"
echo

# ── Auth check
[ "$HTTP_X_RELOAD_SECRET" = "$SECRET" ] || { echo Forbidden; exit 0; }

# ── Parse query string
DOMAIN="" ; EMAIL=""
IFS='&' read -ra KV <<< "$QUERY_STRING"
for kv in "${KV[@]}"; do
  k="${kv%%=*}" ; v="${kv#*=}"
  [ "$k" = "domain" ] && DOMAIN="$v"
  [ "$k" = "email"  ] && EMAIL="$v"
done
[ -n "$DOMAIN" ] && [ -n "$EMAIL" ] || { echo "Usage: ?domain=&email="; exit 0; }

echo ">>> certbot --apache -d $DOMAIN -d www.$DOMAIN (this may take a minute) …"
# Run Certbot and capture *both* exit code & stdout
OUT=$(sudo certbot --apache --non-interactive --agree-tos \
                   --reinstall \
                   --redirect \
                   --email "$EMAIL" \
                   -d "$DOMAIN" -d "www.$DOMAIN" 2>&1)
CODE=$?

echo "$OUT"
echo ">>> exit-code: $CODE"
[ $CODE -eq 0 ] && echo "CERTBOT_SUCCESS" || echo "CERTBOT_FAILED"

exit 0

```

========================================

**php/Dockerfile**
```
FROM php:8.1-fpm

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1 \
    COMPOSER_DISABLE_XDEBUG_WARN=1

# 1) System & PHP extensions ---------------------------------------------------
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        default-mysql-client vim sudo git unzip zip \
        libfreetype6-dev libjpeg62-turbo-dev libpng-dev libzip-dev \
        libonig-dev libxml2-dev \
        python3 python3-pip python3-jinja2 \
        python3-pandas python3-requests \
        openssh-client \
        docker.io \
        certbot python3-certbot-apache \
        curl ca-certificates && \
    \
    PIP_BREAK_SYSTEM_PACKAGES=1 \
        pip3 install --no-cache-dir gdown python-dotenv && \
    docker-php-ext-configure gd --with-freetype --with-jpeg && \
    docker-php-ext-install -j"$(nproc)" \
        mysqli pdo pdo_mysql gd zip opcache && \
    pecl install redis && \
    docker-php-ext-enable redis && \
    \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Node.js and npm ------------------------------------------------------
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest

# 3) Composer & WP-CLI ---------------------------------------------------------
RUN curl -sS https://getcomposer.org/installer | php && \
    mv composer.phar /usr/local/bin/composer && chmod +x /usr/local/bin/composer && \
    curl -o /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
    chmod +x /usr/local/bin/wp

# 4) Copy configs & Pete installer --------------------------------------------
COPY php.ini                 /usr/local/etc/php/
COPY .gitconfig              /root/.gitconfig
COPY pete_install.sh         /usr/local/bin/pete_install.sh
RUN chmod +x /usr/local/bin/pete_install.sh && \
    chown www-data:www-data  /usr/local/bin/pete_install.sh

# 5) Create dirs & sudo rules Pete expects ------------------------------------
RUN mkdir -p /etc/sudoers.d /var/www/.ssh /data/wwwlog && \
    printf '%s\n' \
     'www-data ALL=(ALL) NOPASSWD: /usr/bin/git, /etc/init.d/apache2 reload, /usr/bin/update-alternatives, /var/www/html/Pete/scripts/*, /usr/bin/docker exec wp-pete-docker-apache-1 apachectl -k graceful' > /etc/sudoers.d/www-data && \
    chmod 440 /etc/sudoers.d/www-data && \
    chown -R www-data:www-data /var/www

COPY config.inc.php.custom /opt/pma-config/
# Replace whatever is currently set for $cfg['blowfish_secret']
# with the literal placeholder '__BLOWFISH__'
RUN sed -i "s/^\(\$cfg\['blowfish_secret'\][[:space:]]*=[[:space:]]*\).*;/\1'__BLOWFISH__';/" \
        /opt/pma-config/config.inc.php.custom

# 7) Working dir, ownership, expose FPM ---------------------------------------
WORKDIR /var/www/html

EXPOSE 9000
# default user is root now; no USER line
ENTRYPOINT ["/usr/local/bin/pete_install.sh"]
# pete_install.sh will exec php-fpm as www-data

```

========================================

**apache/Dockerfile**
```
# ─────────────────────────────────────────────
# Apache (event) + ModSecurity 2 + OWASP CRS
# ─────────────────────────────────────────────
FROM debian:bookworm-slim
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      apache2 apache2-utils \
      libapache2-mod-security2 \
      certbot python3-certbot-apache \
      sudo curl ca-certificates vim-tiny && \
    rm -rf /var/lib/apt/lists/*

RUN a2dismod mpm_prefork && \
    a2enmod mpm_event proxy proxy_fcgi rewrite headers expires ssl \
            http2 deflate \
    && a2enmod cgid 

RUN ln -s /usr/bin/vim.tiny /usr/bin/vim
COPY status.conf /etc/apache2/mods-enabled/status.conf

COPY performance.tmpl /tmp/performance.tmpl

# ── declare build-args; give safe fall-backs so docker build . works ─
ARG APACHE_START_SERVERS=2
ARG APACHE_SERVER_LIMIT=4
ARG APACHE_THREADS=64
ARG APACHE_MAX_WORKERS=512
ARG APACHE_SPARE_MIN=64
ARG APACHE_SPARE_MAX=192

# ── render template → final conf; enable it ─────────────────────────
RUN mkdir -p /etc/apache2/conf-available && \
    sed  -e "s/{{START_SERVERS}}/${APACHE_START_SERVERS}/" \
         -e "s/{{SERVER_LIMIT}}/${APACHE_SERVER_LIMIT}/" \
         -e "s/{{THREADS_PER_CHILD}}/${APACHE_THREADS}/" \
         -e "s/{{MAX_REQUEST_WORKERS}}/${APACHE_MAX_WORKERS}/" \
         -e "s/{{SPARE_MIN}}/${APACHE_SPARE_MIN}/" \
         -e "s/{{SPARE_MAX}}/${APACHE_SPARE_MAX}/" \
         /tmp/performance.tmpl \
         > /etc/apache2/conf-available/performance.conf && \
    rm /tmp/performance.tmpl && \
    a2enconf performance  

# ── Install ModSecurity 2 and Debian’s CRS package ───────────────────────────
ARG CRS_VERSION=4.15.0
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      libapache2-mod-security2 \
      curl \
      ca-certificates && \
    \
    # Prepare ModSecurity dirs
    mkdir -p /etc/modsecurity /etc/modsecurity/rules /var/cache/modsecurity && \
    \
    # Copy base config
    cp /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf && \
    \
    # Download and extract OWASP CRS v${CRS_VERSION}
    curl -fsSL "https://github.com/coreruleset/coreruleset/archive/refs/tags/v${CRS_VERSION}.tar.gz" \
      -o /tmp/crs.tar.gz && \
    tar zxvf /tmp/crs.tar.gz -C /usr/share && \
    mv /usr/share/coreruleset-${CRS_VERSION} /usr/share/modsecurity-crs && \
    rm /tmp/crs.tar.gz && \
    \
    # Copy CRS example setup into place
    cp /usr/share/modsecurity-crs/crs-setup.conf.example /etc/modsecurity/crs-setup.conf && \
    \
    # Symlink all rule and data files
    ln -sf /usr/share/modsecurity-crs/rules/*.conf /etc/modsecurity/rules/ && \
    ln -sf /usr/share/modsecurity-crs/rules/*.data /etc/modsecurity/rules/

# ── Copy our Apache include that loads mod_security2 + CRS ───────────────────
COPY modsecurity-apache.conf /etc/apache2/conf-available/modsecurity.conf
COPY whitelist.conf /etc/modsecurity/whitelist.conf

# ── Enable security2, drop any default, enable ours, turn engine ON, test syntax ─
RUN a2enmod security2 \
 && rm -f /etc/apache2/mods-enabled/security2.conf \
 && a2enconf modsecurity \
 && sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/' /etc/modsecurity/modsecurity.conf \
 \
 # enable JSON output for the audit log
 && echo 'SecAuditLogFormat JSON' >> /etc/modsecurity/modsecurity.conf \
 \
 && apache2ctl configtest

# ── make sure Apache can write its own logs ──────────────────────────────
RUN set -e \
 && mkdir -p /var/log/apache2 \
 && touch      /var/log/apache2/modsec_audit.log \
 && chown -R www-data:www-data /var/log/apache2 \
 && chmod 750 /var/log/apache2

# 4) Reload-hook CGI
ARG APACHE_RELOAD_SECRET
COPY reload_apache.cgi /usr/local/bin/
RUN sed -i "s@__RELOAD_SECRET__@${APACHE_RELOAD_SECRET}@" /usr/local/bin/reload_apache.cgi \
 && chmod 755 /usr/local/bin/reload_apache.cgi

COPY issue_cert.cgi /usr/local/bin/
RUN sed -i "s@__RELOAD_SECRET__@${APACHE_RELOAD_SECRET}@" /usr/local/bin/issue_cert.cgi \
    && chmod 755 /usr/local/bin/issue_cert.cgi

COPY toggle_modsec.sh /usr/local/bin/
RUN chmod 755  /usr/local/bin/toggle_modsec.sh \
    && chown root:root /usr/local/bin/toggle_modsec.sh

COPY modsecurity_status.cgi /usr/local/bin/
RUN sed -i "s@__RELOAD_SECRET__@${APACHE_RELOAD_SECRET}@" /usr/local/bin/modsecurity_status.cgi \
    && chmod 755 /usr/local/bin/modsecurity_status.cgi


# 5) Pete & phpMyAdmin base vhosts
COPY pete.conf /etc/apache2/sites-available/000-pete.conf
COPY phpmyadmin.conf   /etc/apache2/sites-available/
COPY whitelist.conf    /etc/modsecurity/whitelist.conf
COPY modsecurity-apache.conf /etc/apache2/conf-available/modsecurity.conf

# 6) Make vhost dirs shared & writable *before* volume is created
RUN chown -R www-data:www-data /etc/apache2/sites-available /etc/apache2/sites-enabled

# 7) Enable baseline sites & configs (done once at build-time)
RUN a2ensite 000-pete.conf && \
    a2enconf modsecurity && \
    a2dissite 000-default.conf

# 8) Allow www-data (CGI) to reload Apache
RUN printf '%s\n' \
  'www-data ALL=(root) NOPASSWD: /usr/sbin/apachectl -k graceful' \
  'www-data ALL=(root) NOPASSWD: /usr/bin/certbot' \
  'www-data ALL=(root) NOPASSWD: /usr/bin/certbot renew' \
  'www-data ALL=(root) NOPASSWD: /usr/local/bin/toggle_modsec.sh' \
  'Defaults:www-data !requiretty' \
  > /etc/sudoers.d/www-data && chmod 440 /etc/sudoers.d/www-data

RUN echo 'ServerName localhost' >> /etc/apache2/apache2.conf
WORKDIR /var/www/html
EXPOSE 80

# wait-helper script
COPY start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

# --- new: ensure volume will be writable by Pete ---
RUN mkdir -p /var/www/html && chown -R www-data:www-data /var/www/html

CMD ["start.sh"]

```

========================================

**docker-compose.yml**
```
services:
  apache:
    build:
      context: ./apache
      args:
        APACHE_RELOAD_SECRET: ${APACHE_RELOAD_SECRET}
        APACHE_START_SERVERS: ${APACHE_START_SERVERS}
        APACHE_SERVER_LIMIT:  ${APACHE_SERVER_LIMIT}
        APACHE_THREADS:       ${APACHE_THREADS}
        APACHE_MAX_WORKERS:   ${APACHE_MAX_WORKERS}
        APACHE_SPARE_MIN:     ${APACHE_SPARE_MIN}
        APACHE_SPARE_MAX:     ${APACHE_SPARE_MAX}
    restart: always
    volumes:
      - wp_data:/var/www/html           
      - apache_sites_available:/etc/apache2/sites-available
      - apache_sites_enabled:/etc/apache2/sites-enabled
      - pma_data:/usr/src/phpmyadmin:ro
      - ssl_data:/etc/letsencrypt
      - apache_logs:/var/log/apache2 
    environment:
      APACHE_RELOAD_SECRET: ${APACHE_RELOAD_SECRET}
      APACHE_RELOAD_URL: ${APACHE_RELOAD_URL}
      APACHE_CERTBOT_URL: ${APACHE_CERTBOT_URL}
      TMPDIR: /var/cache/apache2/mod_cache_disk/tmp
    ports:
      - "80:80"
      - "443:443"
    networks:
      default:
        aliases:
          - demo3.petelocal.net
          - demo3.wordpresspete.org
  php:
    build: ./php
    restart: always
    depends_on:                # ← php waits for apache, db, redis
      - apache
      - db
      - redis
    expose:
      - "9000"                           
    volumes:
      - wp_data:/var/www/html
      - ssh_data:/root/.ssh
      - apache_sites_available:/etc/apache2/sites-available
      - apache_sites_enabled:/etc/apache2/sites-enabled
      - pma_data:/usr/src/phpmyadmin
      - ssl_data:/etc/letsencrypt
      - apache_logs:/var/log/apache2      
    env_file: .env                       
    environment:
      WORDPRESS_DB_HOST: db:3306
      PETE_DB_NAME: ${PETE_DB_NAME}
      PETE_DB_USER: ${PETE_DB_USER}
      PETE_DB_PASSWORD: ${PETE_DB_PASS}
      PETE_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      PETE_ENVIRONMENT: ${PETE_ENVIRONMENT}
      APACHE_RELOAD_SECRET: ${APACHE_RELOAD_SECRET}
      APACHE_RELOAD_URL: ${APACHE_RELOAD_URL}
      APACHE_CERTBOT_URL: ${APACHE_CERTBOT_URL}
      REDIS_HOST: redis
  db:
    image: mariadb:10.6
    restart: always
    volumes:
      - db_data:/var/lib/mysql
      - ./db-config/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./db-config/init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

  redis:
    image: redis:7-alpine
    restart: always

volumes:
  wp_data:
  db_data:
  ssh_data:
  apache_sites_available:
  apache_sites_enabled:
  pma_data:
  ssl_data:
  apache_logs:
```

