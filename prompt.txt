**Context:** You are an experienced DevOps devolver with extensive knowlege in Docker. Below are the code files of a Docker LAMP app

**docker-compose.yml**
```
version: "3.8"

services:
  # 1) WordPress + PHP-Apache
  wordpress:
    build: ./wordpress
    restart: always
    volumes:
      - wp_data:/var/www/html
      - ssh_data:/root/.ssh
      - apache_data:/etc/apache2
    env_file: .env
    environment:
      WORDPRESS_DB_HOST: db:3306
      PETE_DB_NAME: ${PETE_DB_NAME}
      PETE_DB_USER: ${PETE_DB_USER}
      PETE_DB_PASSWORD: ${PETE_DB_PASS}
      PETE_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      REDIS_HOST: redis
    depends_on:
      - db
      - redis
    ports:
      - "80:80"

  # 2) MariaDB
  db:
    image: mariadb:10.6
    restart: always
    volumes:
      - db_data:/var/lib/mysql
      - ./db-config/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./db-config/init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

  # 3) Redis for object caching
  redis:
    image: redis:7-alpine
    restart: always

  # 4) phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      PMA_USER: ${DB_USER}
      PMA_PASSWORD: ${DB_PASS}
    depends_on:
      - db

volumes:
  wp_data:
  db_data:
  ssh_data:
  apache_data:
```

========================================

**wordpress/Dockerfile**
```
FROM php:8.1-apache

# 1) Install PHP extensions, MySQL client, and tools
RUN apt-get update \
 && apt-get install -y \
      default-mysql-client \
      vim \
      sudo \
      python3 \
      python3-pip \
      libfreetype6-dev \
      libjpeg62-turbo-dev \
      libpng-dev \
      libzip-dev \
      zip \
      unzip \
      git \
      libonig-dev \
      libxml2-dev \
 && docker-php-ext-configure gd --with-freetype --with-jpeg \
 && docker-php-ext-install -j"$(nproc)" \
      mysqli \
      pdo \
      pdo_mysql \
      gd \
      zip \
      opcache \
 && mkdir -p /tmp/pear/temp \
 && chmod -R 0777 /tmp/pear \
 && pecl install redis \
 && docker-php-ext-enable redis \
 && rm -rf /var/lib/apt/lists/*

# 2) Enable Apache modules (added vhost_alias)
RUN a2enmod rewrite headers expires vhost_alias

# 3) Ensure vhost directories exist (for your bind mounts)
RUN mkdir -p /etc/apache2/sites-available /etc/apache2/sites-enabled

# copy & enable pete.conf
COPY pete.conf /etc/apache2/sites-available/pete.conf
RUN chmod 644 /etc/apache2/sites-available/pete.conf \
 && a2dissite 000-default.conf \
 && a2ensite pete.conf

ARG PMA_VERSION=5.2.1

# 4) Pull in phpMyAdmin and set it up under /usr/src/phpmyadmin
RUN set -eux; \
    curl -fsSL "https://files.phpmyadmin.net/phpMyAdmin/${PMA_VERSION}/phpMyAdmin-${PMA_VERSION}-all-languages.tar.gz" \
      -o /tmp/pma.tar.gz; \
    tar xzf /tmp/pma.tar.gz -C /usr/src/; \
    mv /usr/src/phpMyAdmin-${PMA_VERSION}-all-languages /usr/src/phpmyadmin; \
    rm /tmp/pma.tar.gz; \
    cp /usr/src/phpmyadmin/config.sample.inc.php /usr/src/phpmyadmin/config.inc.php; \
    sed -i "s|\$cfg\['blowfish_secret'\] = ''|\$cfg['blowfish_secret'] = '$(openssl rand -base64 32)'|g" /usr/src/phpmyadmin/config.inc.php; \
    sed -i "s/\$cfg\['Servers'\]\[1\]\['host'\] = 'localhost'/\$cfg['Servers'][1]['host'] = 'db'/g" /usr/src/phpmyadmin/config.inc.php; \
    chown -R www-data:www-data /usr/src/phpmyadmin

# Copy your separate global alias file and enable it
COPY phpmyadmin.conf /etc/apache2/sites-available/phpmyadmin.conf
RUN chmod 644 /etc/apache2/sites-available/phpmyadmin.conf \
 && a2ensite phpmyadmin.conf

# <<< NEW: rename the symlink so pete is alphabetically first >>>
RUN mv /etc/apache2/sites-enabled/pete.conf \
      /etc/apache2/sites-enabled/000-pete.conf

# 3) Copy custom php.ini
COPY php.ini /usr/local/etc/php/

# 5) Set working dir & ensure ownership
WORKDIR /var/www/html
RUN chown -R www-data:www-data /var/www/html

# 6) (Optional) Install WP-CLI
RUN curl -o /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \
 && chmod +x /usr/local/bin/wp

# Silence Apache FQDN warning
RUN echo "ServerName localhost" >> /etc/apache2/apache2.conf

# 👇 Install Composer globally
RUN curl -sS https://getcomposer.org/installer | php \
  && mv composer.phar /usr/local/bin/composer \
  && chmod +x /usr/local/bin/composer

# Copy and set entrypoint script
COPY pete_install.sh /usr/local/bin/pete_install.sh
RUN chmod +x /usr/local/bin/pete_install.sh \
 && chown www-data:www-data /usr/local/bin/pete_install.sh

# 7) Ensure sudoers.d exists before adding rules
RUN mkdir -p /etc/sudoers.d

# 8) Create a single‐line sudoers entry for www-data
RUN printf '%s\n' \
  'www-data ALL=(ALL) NOPASSWD: /etc/init.d/apache2 reload, /usr/bin/update-alternatives, /var/www/html/Pete/scripts/securitystatus.sh, /var/www/html/Pete/scripts/get_mod_sec_report.sh, /var/www/html/Pete/scripts/print_security_report.sh, /var/www/html/Pete/scripts/change_php.sh, /var/www/html/Pete/scripts/phpmyadmin.sh, /var/www/html/Pete/scripts/delete.sh, /var/www/html/Pete/scripts/upload_capacity.sh, /usr/bin/git, /var/www/html/Pete/scripts/generate_ssl.sh, /var/www/html/Pete/scripts/create_config_file.sh' \
  > /etc/sudoers.d/www-data \
 && chmod 440 /etc/sudoers.d/www-data

# Prepare .ssh directory for cloning private repos
RUN mkdir -p /var/www/.ssh \
 && chown -R www-data:www-data /var/www

# ── create a persistent log dir and four shorthand symlinks under /root ──
RUN mkdir -p /data/wwwlog \
 && mkdir -p /root/sites /root/configs /root/configse /root/logs \
 && ln -sf /var/www/html                   /root/sites \
 && ln -sf /etc/apache2/sites-available    /root/configs \
 && ln -sf /etc/apache2/sites-enabled      /root/configse \
 && ln -sf /data/wwwlog                    /root/logs

EXPOSE 80

VOLUME ["/etc/apache2/sites-available","/etc/apache2/sites-enabled"]

ENTRYPOINT ["/usr/local/bin/pete_install.sh"]
CMD ["apache2-foreground"]

```

========================================

**db-config/my.cnf**
```
[mysqld]
innodb_buffer_pool_size = 1G
innodb_log_file_size    = 256M
innodb_flush_log_at_trx_commit = 2
query_cache_type = 0
skip-name-resolve
```

========================================

**wordpress/pete_install.sh**
```bash
#!/bin/bash
set -e

# 1) Wait for MySQL to be ready
echo "Waiting for MySQL..."
until mysqladmin ping -h db -u"$DB_UPETE_DB_USERSER" -p"$PETE_DB_PASS" --silent; do
  sleep 3
done

# 3) Full Pete install (only once)
if [ ! -f /var/www/html/.installed ]; then
  echo "#######################################"
  echo "Starting WordPress Pete installation..."
  echo "#######################################"

  rm -rf /var/www/html/Pete
  cd /var/www/html

  git clone -b docker_pro_utm https://ozone777@bitbucket.org/ozone777/wordpresspete3.git Pete
  cd Pete

  #git fetch --tags
  #latestTag=$(git describe --tags $(git rev-list --tags --max-count=1))
  #git checkout "$latestTag"
  latestTag=10.4

  # Reset composer & env
  rm -f auth.json composer.json
  cp composer_original.json composer.json
  cp .env.example .env

  cat <<EOF >> .env
DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=${PETE_DB_NAME}
DB_USERNAME=${PETE_DB_USER}
DB_PASSWORD=${PETE_DB_PASSWORD}
PETE_ROOT_PASS=${PETE_ROOT_PASSWORD}
PETE_DASHBOARD_URL=https://dashboard.wordpresspete.com
PETE_DEMO=inactive
PETE_ENVIRONMENT=production
PETE_DEBUG=inactive
EOF

  # Install PHP deps & migrate
  rm -rf vendor
  COMPOSER_CACHE_DIR=/dev/null composer install --ignore-platform-reqs --prefer-dist --no-dev
  php artisan key:generate
  php artisan migrate

  # Add general options
  php artisan addoption --option_name=os --option_value=docker
  php artisan addoption --option_name=server_status --option_value=off
  php artisan addoption --option_name=parent_version --option_value=6
  php artisan addoption --option_name=version --option_value="$latestTag"
  php artisan addoption --option_name=app_root --option_value=/var/www/html
  php artisan addoption --option_name=server_conf --option_value=/etc/apache2/sites-available
  php artisan addoption --option_name=server --option_value=apache
  php artisan addoption --option_name=server_version --option_value=24
  php artisan addoption --option_name=os_version --option_value=bionic
  php artisan addoption --option_name=os_distribution --option_value=ubuntu
  php artisan addoption --option_name=logs_route --option_value=/var/www/html/wwwlog
  php artisan addoption --option_name=os_stack --option_value=apache_mpm_prefork
  php artisan addoption --option_name=domain_template --option_value=petelocal.net

  # Create needed dirs & perms
  mkdir -p public/uploads public/export trash storage storage/logs
  touch storage/logs/laravel.log
  mkdir -p /var/www/html/wwwlog/Pete /var/www/html/wwwlog/example1
  composer dump-autoload --ignore-platform-reqs

  # Mark as installed
  echo "done" > /var/www/html/.installed
  echo "#######################################"
  echo "WordPress Pete installation completed"
  echo "#######################################"

  # Install mod_sec_report dependencies
  cd /var/www/html/Pete/mod_sec_report \
    && pip3 install --no-cache-dir -r requirements.txt \
    && chmod 755 mod_sec_report
fi

# 4) Post-install setup
echo "#######################################"
echo "Launching WordPress Pete..."
echo "#######################################"

# Domain template
#cd /var/www/html/Pete && php artisan addoption --option_name=domain_template --option_value="${DOMAIN_TEMPLATE:-}"

# SSH key (for private repos, if needed)
SSH_DIR="${HOME}/.ssh"
if [ ! -f "${SSH_DIR}/id_rsa.pub" ]; then
  mkdir -p "${SSH_DIR}"
  ssh-keygen -t rsa -N "" -f "${SSH_DIR}/id_rsa"
  chmod 600 "${SSH_DIR}/id_rsa" "${SSH_DIR}/id_rsa.pub"
  chown -R www-data:www-data "${SSH_DIR}"
fi

# ModSecurity flag
if [ "$MOD_SECURITY" = "On" ]; then
  cd /var/www/html/Pete && php artisan addoption --option_name=security_status --option_value=on
else
  cd /var/www/html/Pete && php artisan addoption --option_name=security_status --option_value=off
fi

# Server-status flag
if [ "$SERVER_STATUS" = "On" ]; then
  cd /var/www/html/Pete && php artisan addoption --option_name=server_status --option_value=on
else
  cd /var/www/html/Pete && php artisan addoption --option_name=server_status --option_value=off
fi

# Ensure correct permissions
chown -R www-data:www-data /var/www/html

# 5) Finally delegate to the official Apache entrypoint
exec docker-php-entrypoint "$@"

```

========================================

**db-config/init.sh**
```bash
#!/usr/bin/env bash
set -e

echo ">>> Initializing WordPress & Pete databases…"

mysql -u root -p"$MYSQL_ROOT_PASSWORD" <<-EOSQL

  CREATE DATABASE IF NOT EXISTS \`${PETE_DB_NAME}\`
    CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
  CREATE USER IF NOT EXISTS '${PETE_DB_USER}'@'%'
    IDENTIFIED BY '${PETE_DB_PASS}';
  GRANT ALL PRIVILEGES ON \`${PETE_DB_NAME}\`.* TO '${PETE_DB_USER}'@'%';

  GRANT CREATE, DROP, ALTER, INDEX ON *.* TO '${PETE_DB_USER}'@'%';

  FLUSH PRIVILEGES;
EOSQL

```

========================================

**.env**
```
MYSQL_ROOT_PASSWORD=EvenMoreSecret
PETE_DB_USER=pete
PETE_DB_NAME=pete_db
PETE_DB_PASS=pixma301
PROMPT_GENERATOR_FILES=docker-compose.yml,wordpress/Dockerfile,db-config/my.cnf,wordpress/pete_install.sh,db-config/init.sh,.env,wordpress/pete.conf,wordpress/phpmyadmin.conf
PROMPT_GENERATOR_CONTEXT=You are an experienced DevOps devolver with extensive knowlege in Docker. Below are the code files of a Docker LAMP app
```

========================================

**wordpress/pete.conf**
```
<VirtualHost *:80>
    ServerName localhost

    # Point DocumentRoot to Laravel’s public folder
    DocumentRoot /var/www/html/Pete/public

    <Directory /var/www/html/Pete/public>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    # You can add logs if you like:
    # ErrorLog ${APACHE_LOG_DIR}/pete_error.log
    # CustomLog ${APACHE_LOG_DIR}/pete_access.log combined
</VirtualHost>
```

========================================

**wordpress/phpmyadmin.conf**
```
Alias /phpmyadmin /usr/src/phpmyadmin

<Directory /usr/src/phpmyadmin>
    Options Indexes FollowSymLinks
    DirectoryIndex index.php
    AllowOverride None
    Require all granted
</Directory>
```
